import React from 'react';
import { industries, projectTypes, featureOptions } from '../data/industryData';

const ResultView = ({ 
  estimate, 
  industry, 
  projectType, 
  complexity, 
  features,
  showPremiumPrompt,
  setView,
  email,
  setEmail,
  emailSubmitted,
  handleSubscribe,
  isLoading,
  setIsLoading, // Make sure this prop is received
  error,
  textSummaryRef,
  savedEstimates,
  setSavedEstimates,
  setModalContent,
  setShowModal,
  trackEvent,
  handleAccountAction,
  setMobileMenuOpen
}) => {
  if (!estimate) return null;
  
  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      maximumFractionDigits: 0,
    }).format(amount);
  };
  
  // Generate text-based estimate summary
  const generateTextSummary = () => {
    if (!estimate) return '';
    
    const industryName = industries.find(i => i.id === industry)?.name || 'Unknown';
    const projectName = projectTypes[industry]?.find(p => p.id === projectType)?.name || 'Unknown';
    const complexityName = complexity.charAt(0).toUpperCase() + complexity.slice(1);
    
    // Format the features as a list
    const featuresList = features.map(featureId => {
      const feature = featureOptions[industry].find(f => f.id === featureId);
      return feature ? `- ${feature.name}` : '';
    }).filter(Boolean).join('\n');
    
    // Create a professional-looking text summary
    return `
# FREELANCE PROJECT ESTIMATE

## Project Details
Industry: ${industryName}
Project Type: ${projectName}
Complexity: ${complexityName}
Date: ${new Date().toLocaleDateString()}

## Estimate Summary
Time Estimate: ${estimate.hourRange.min}-${estimate.hourRange.max} hours
Cost Estimate: ${formatCurrency(estimate.costRange.min)}-${formatCurrency(estimate.costRange.max)}

${features.length > 0 ? `## Included Features\n${featuresList}` : ''}

---
Generated by BidRight.app | ${window.location.origin}
    `.trim();
  };
  
  // Copy estimate summary to clipboard
  const copyEstimateToClipboard = () => {
    if (!estimate) return;
    
    try {
      const textSummary = generateTextSummary();
      
      // Use the Clipboard API to copy text
      navigator.clipboard.writeText(textSummary)
        .then(() => {
          // Show success modal
          setModalContent({
            title: 'Estimate Copied',
            message: 'Your estimate summary has been copied to your clipboard. You can now paste it into your document or email.'
          });
          setShowModal(true);
        })
        .catch(err => {
          console.error("Error copying to clipboard:", err);
          
          // Fallback method using textarea if clipboard API fails
          if (textSummaryRef.current) {
            textSummaryRef.current.value = textSummary;
            textSummaryRef.current.select();
            document.execCommand('copy');
            
            setModalContent({
              title: 'Estimate Copied',
              message: 'Your estimate summary has been copied to your clipboard. You can now paste it into your document or email.'
            });
            setShowModal(true);
          } else {
            alert("Could not copy the estimate. Please try again.");
          }
        });
    } catch (error) {
      console.error("Error copying estimate:", error);
      alert("There was an error copying your estimate. Please try again.");
    }
  };
  
  // Save current estimate to localStorage
  const saveEstimate = () => {
    if (!estimate) return;
    
    try {
      setIsLoading(true);
      
      const newSavedEstimates = [...savedEstimates, estimate];
      setSavedEstimates(newSavedEstimates);
      localStorage.setItem('freelanceEstimates', JSON.stringify(newSavedEstimates));
      
      // Track the save event
      trackEvent('estimate_saved', {
        industry: industry,
        project_type: projectType
      });
      
      setModalContent({
        title: 'Estimate Saved',
        message: 'Your estimate has been saved. You can access all your saved estimates from the "My Estimates" section.'
      });
      setShowModal(true);
      setIsLoading(false);
    } catch (error) {
      console.error("Error saving estimate:", error);
      alert("There was an error saving your estimate. Please try again.");
      setIsLoading(false);
    }
  };
  
  return (
    <div className="max-w-4xl mx-auto p-6">
      <h2 className="text-2xl font-bold mb-6">Project Estimate</h2>
      
      <div className="bg-white rounded-xl shadow-lg overflow-hidden mb-8">
        <div className="bg-blue-600 p-6 text-white">
          <h3 className="text-xl font-bold mb-1">
            {industries.find(i => i.id === industry)?.name} - {projectTypes[industry].find(p => p.id === projectType)?.name}
          </h3>
          <p className="text-blue-100">
            Complexity: {complexity.charAt(0).toUpperCase() + complexity.slice(1)}
          </p>
        </div>
        
        <div className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            <div className="bg-blue-50 p-4 rounded-lg">
              <h4 className="text-lg font-semibold mb-2">Time Estimate</h4>
              <p className="text-3xl font-bold mb-1">{estimate.hourRange.min}-{estimate.hourRange.max} hours</p>
              <p className="text-sm text-gray-500">Based on project type and selected features</p>
            </div>
            
            <div className="bg-green-50 p-4 rounded-lg">
              <h4 className="text-lg font-semibold mb-2">Cost Estimate</h4>
              <p className="text-3xl font-bold mb-1">{formatCurrency(estimate.costRange.min)}-{formatCurrency(estimate.costRange.max)}</p>
              <p className="text-sm text-gray-500">Recommended price range</p>
            </div>
          </div>
          
          <div className="space-y-4 mb-6">
            <h4 className="text-lg font-semibold">Included Features</h4>
            <ul className="grid grid-cols-1 md:grid-cols-2 gap-2">
              {features.length > 0 ? (
                features.map(featureId => (
                  <li key={featureId} className="flex items-center">
                    <span className="text-green-500 mr-2">✓</span>
                    {featureOptions[industry].find(f => f.id === featureId)?.name}
                  </li>
                ))
              ) : (
                <li className="text-gray-500">No additional features selected</li>
              )}
            </ul>
          </div>
          
          {/* Premium features teaser */}
          {showPremiumPrompt && (
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
            <h4 className="font-semibold flex items-center">
              <span className="text-yellow-500 mr-2">⭐</span>
              Unlock Pro Features
            </h4>
            <p className="text-sm mb-3">
              Upgrade to access detailed project breakdowns, risk assessment, 
              competitor rate analysis, and more!
            </p>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-2 text-sm mb-3">
              <div className="flex items-center">
                <span className="text-gray-400 mr-2">○</span>
                Detailed Task Breakdown
              </div>
              <div className="flex items-center">
                <span className="text-gray-400 mr-2">○</span>
                Risk Assessment
              </div>
              <div className="flex items-center">
                <span className="text-gray-400 mr-2">○</span>
                Competitor Rate Analysis
              </div>
            </div>
            <button 
              className="bg-yellow-500 hover:bg-yellow-600 text-white py-2 px-4 rounded font-medium text-sm transition-colors"
              onClick={() => handleAccountAction('Premium upgrade')}
            >
              Upgrade for $4.99/month
            </button>
          </div>
        )}
          
          <div className="border-t border-gray-200 pt-6 mt-6">
            <div className="flex flex-wrap items-center justify-between gap-4">
              <button
                onClick={() => {
                  setView('estimator');
                  trackEvent('edit_estimate');
                  setMobileMenuOpen(false);
                }}
                className="bg-blue-100 hover:bg-blue-200 text-blue-800 font-semibold py-2 px-6 rounded-lg transition-colors"
              >
                Modify Estimate
              </button>
              
              <div className="flex flex-wrap gap-3">
                <button 
                  className="bg-gray-100 hover:bg-gray-200 text-gray-800 font-semibold py-2 px-4 rounded-lg transition-colors"
                  onClick={() => {
                    copyEstimateToClipboard();
                    trackEvent('copy_estimate');
                  }}
                  disabled={isLoading}
                >
                  {isLoading ? 'Working...' : 'Copy Estimate'}
                </button>
                {/* Hidden textarea for clipboard fallback */}
                <textarea 
                  ref={textSummaryRef}
                  className="sr-only"
                  aria-hidden="true"
                  tabIndex="-1"
                />
                <button 
                  className="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors"
                  onClick={saveEstimate}
                  disabled={isLoading}
                >
                  {isLoading ? 'Saving...' : 'Save Estimate'}
                </button>
              </div>
            </div>
            
            {/* Email capture for lead generation */}
            {showPremiumPrompt && (
              <div className="mt-8 pt-6 border-t border-gray-200">
                <h4 className="font-semibold mb-2">Save your estimate and get pricing tips</h4>
                {emailSubmitted ? (
                  <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                    <p className="text-green-800 font-medium">
                      Thanks for subscribing! We've sent you an email with your estimate.
                    </p>
                  </div>
                ) : (
                  <>
                    <div className="flex">
                      <input
                        type="email"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        placeholder="Your email address"
                        className="flex-1 border border-gray-300 rounded-l-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                        disabled={isLoading}
                      />
                      <button 
                        className={`bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-r-lg transition-colors ${isLoading ? 'opacity-70 cursor-not-allowed' : ''}`}
                        onClick={handleSubscribe}
                        disabled={isLoading}
                      >
                        {isLoading ? 'Subscribing...' : 'Subscribe'}
                      </button>
                    </div>
                    {error && (
                      <div className="mt-2 text-red-600 text-sm">
                        {error}
                      </div>
                    )}
                    <p className="text-xs text-gray-500 mt-2">
                      We'll send you this estimate and occasional pricing tips. No spam ever.
                    </p>
                  </>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ResultView;